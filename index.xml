<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>悟剑阁</title>
    <link>https://sword865.github.io/</link>
    <description>Recent content on 悟剑阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Mon, 08 Mar 2021 15:51:35 +0800</lastBuildDate>
    
        <atom:link href="https://sword865.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Google Small Towers中多目标优化的探索</title>
        <link>https://sword865.github.io/posts/2021/2021-03-08-google-small-towers%E4%B8%AD%E5%A4%9A%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%E7%9A%84%E6%8E%A2%E7%B4%A2/</link>
        <pubDate>Mon, 08 Mar 2021 15:51:35 +0800</pubDate>
        
        <guid>https://sword865.github.io/posts/2021/2021-03-08-google-small-towers%E4%B8%AD%E5%A4%9A%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%E7%9A%84%E6%8E%A2%E7%B4%A2/</guid>
        <description>悟剑阁 https://sword865.github.io/posts/2021/2021-03-08-google-small-towers%E4%B8%AD%E5%A4%9A%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%E7%9A%84%E6%8E%A2%E7%B4%A2/ -&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;多目标优化中有一个很常见的跷跷板问题，就是说在训练时，多个目标会相互影响，导致震荡&amp;mdash;你降我升，我升你降。有时间还会出现Nan的结果，需要很仔细的调参测试+清洗数据才能训练出一个理想的模型。&lt;/p&gt;
&lt;p&gt;针对这种问题，自然就有了一些尝试，比如从帕累托最优的角度寻找优化方向（阿里PEA），修改模型结构使Shared部分存储更泛化的信息（腾讯PLE）。不过这两个写的人都挺多了，就写一下Google Small Towers的这篇文章吧。&lt;/p&gt;
&lt;h2 id=&#34;主要问题讨论&#34;&gt;主要问题讨论&lt;/h2&gt;
&lt;p&gt;文章首先讨论了两个问题：&lt;/p&gt;
&lt;h3 id=&#34;1-over-parameterization对多任务模型的适用性&#34;&gt;1. Over-parameterization对多任务模型的适用性&lt;/h3&gt;
&lt;p&gt;我们都知道over-parameterization对单任务模型是有价值的，那边对多任务模型是否成立？&lt;/p&gt;
&lt;p&gt;这里以将多个目标的线性组合作为优化目标的例子，认为over-parameterization能够帮助处理各任务优化目标之间的冲突问题（既减少跷跷板问题的出现）。&lt;/p&gt;
&lt;h3 id=&#34;2-大型模型和小型模型的多目标学习表现对比&#34;&gt;2. 大型模型和小型模型的多目标学习表现对比&lt;/h3&gt;
&lt;p&gt;通过实验对比了大型模型和小型模型进行多目标学习中的不同表现。&lt;/p&gt;
&lt;p&gt;实验中，不论是增加任务相关结构的复杂度，还是增加任务共享结构的复杂度，Pareto frontier都会呈现先变好在变差的趋势。&lt;/p&gt;
&lt;p&gt;因此，文章认为over-parameterization并不利于多目标学习中的共享性，进而伤害了多目标学习中的泛化能力。因此，在多目标学习中，模型大小实质上是对模型有效性和泛化能力的一种平衡。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To summarize our insights, for a multi-task learning model, small models benefit from good multi-task generalization but hurts Pareto efficiency; big models theoretically have better Pareto efficiency but could suffer from loss of generalization.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;under-parameterized-self-auxiliaries模型结构&#34;&gt;Under-parameterized Self-auxiliaries模型结构&lt;/h2&gt;
&lt;p&gt;文章提出了under-parameterized self-auxiliaries的模型结构：&lt;/p&gt;
&lt;p&gt;首先假设模型的共享方式是所有任务共享最下面的表示层（Hard Sharded，MMOE这种，PLE就不行）,既对任务t，有：&lt;/p&gt;
&lt;p&gt;$$f_{t}(x; \theta_{sh}, \theta_{t})=f_{t}(h(x; \theta_{sh}); \theta_{t}), \forall t$$&lt;/p&gt;
&lt;p&gt;其中 $\theta_t$ 是任务相关的参数， $\theta_sh$ 为共享参数， $h(x;\theta_sh)$ 既为共享的表示层输出。&lt;/p&gt;
&lt;p&gt;文章在这个基础上对每个任务t增加了self-auxiliary tower的附属结构(既一个辅助任务的small tower)，该小塔输出和原来的任务相同，但参数 $\theta_t^{a}$ 很小（既小塔是一个很简单的结构）:&lt;/p&gt;
&lt;p&gt;$$f_t^a(x; \theta_{sh}, \theta_t^a))=f_t(h(x;\theta_{sh}); \theta_t^a), \forall t$$&lt;/p&gt;
&lt;h3 id=&#34;修改后的多目标模型结构&#34;&gt;修改后的多目标模型结构&lt;/h3&gt;
&lt;p&gt;修改后多目标模型的结构是这样的：&lt;/p&gt;
&lt;img width=&#34;500&#34;  src=&#34;../images/google_m_towner.png&#34; class=&#34;center&#34; /&gt;
&lt;h3 id=&#34;损失函数&#34;&gt;损失函数&lt;/h3&gt;
&lt;p&gt;最后的Loss则是在原来的基础上加上了小塔的Loss:&lt;/p&gt;
&lt;p&gt;$$\hat{L}(\theta)=\sum_{t=1}^Tw_t(\hat{L}(\theta_{sh},\theta_t)+\gamma \hat{L}(\theta_{sh},\theta_t^a))$$&lt;/p&gt;
&lt;p&gt;其中： $$\hat{L}(\theta_{sh},\theta_t^a))=\frac{1}{n}\sum_{i=1}^nL_t(f_t^a(x; \theta_{sh}, \theta_t^a)), y_i^t)$$&lt;/p&gt;
&lt;p&gt;这么改的原因自然就是前面的推理了：通过使用较小的模型来提高任务对不同的泛化能力。（任务量变成了原来的两倍，但是其中有一半任务是under-parameterized，因此也就降低了模型over-parameterized对共享性的破坏力）。&lt;/p&gt;
&lt;p&gt;文章认为，这种通过强迫模型学习共享层来提高复数任务的的结构也是一种正则化的手段。&lt;/p&gt;
&lt;h2 id=&#34;小塔结构示例&#34;&gt;小塔结构示例&lt;/h2&gt;
&lt;p&gt;这里对小塔的结构没有什么限制，唯一的要求就是要比模型简单，下面是文章里的一些例子：&lt;/p&gt;
&lt;img src=&#34;../images/google_m_tower_small_tower.png&#34; /&gt;
&lt;p&gt;最后主要就是附录中的证明与实验细节了，建议直接读原文了解。&lt;/p&gt;
&lt;h2 id=&#34;注释与思考&#34;&gt;注释与思考&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注1&lt;/strong&gt;: Over-Parameterization的说明见&amp;quot;&lt;a href=&#34;https://arxiv.org/abs/1812.11118&#34;&gt;Reconciling modern machine-learning practice and the classical bias–variance trade-off&lt;/a&gt;&amp;ldquo;和&amp;rdquo;&lt;a href=&#34;https://arxiv.org/abs/1903.07571&#34;&gt;Two models of double descent for weak features&lt;/a&gt;&amp;ldquo;等文章，或者&lt;a href=&#34;https://www.zhihu.com/question/434311126&#34;&gt;知乎相关讨论&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注2&lt;/strong&gt;: 有意思的是Small Tower通过小塔来提升大塔多任务的效果，而阿里的Rocket Launching则是通过大塔来提高小塔的效果，这两个模型放在一起会怎么样呢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注3&lt;/strong&gt;: 最近发现还有一篇修改优化算法的文章：Gradient Surgery for Multi-Task Learning，不过还没来得急细看，等有空了试试对我们的任务有没有帮助。&lt;/p&gt;
- https://sword865.github.io/posts/2021/2021-03-08-google-small-towers%E4%B8%AD%E5%A4%9A%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%E7%9A%84%E6%8E%A2%E7%B4%A2/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>推荐系统周边设施--特征商店</title>
        <link>https://sword865.github.io/posts/2021/2021-03-07-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%91%A8%E8%BE%B9%E8%AE%BE%E6%96%BD--%E7%89%B9%E5%BE%81%E5%95%86%E5%BA%97/</link>
        <pubDate>Sun, 07 Mar 2021 15:51:35 +0800</pubDate>
        
        <guid>https://sword865.github.io/posts/2021/2021-03-07-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%91%A8%E8%BE%B9%E8%AE%BE%E6%96%BD--%E7%89%B9%E5%BE%81%E5%95%86%E5%BA%97/</guid>
        <description>悟剑阁 https://sword865.github.io/posts/2021/2021-03-07-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%91%A8%E8%BE%B9%E8%AE%BE%E6%96%BD--%E7%89%B9%E5%BE%81%E5%95%86%E5%BA%97/ -&lt;p&gt;好久没写博客了，今天写一点推荐系统周边设施的东西。&lt;/p&gt;
&lt;h2 id=&#34;特征管理&#34;&gt;特征管理&lt;/h2&gt;
&lt;p&gt;特征商店会存储特征元数据，比如特征的计算逻辑、血缘关系、数据类型。 一般来说，这些元数据用于管理特征的生命周期、计算任务和使用方式。&lt;/p&gt;
&lt;h2 id=&#34;离线训练数据生成&#34;&gt;离线训练数据生成&lt;/h2&gt;
&lt;p&gt;为了保证线上线下数据的一致性，推荐系统的训练数据通常有两个数据流Join得到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Ranking中即实时打点：数据流以&lt;code&gt;traceId&lt;/code&gt;为Key，排序时特征为Value。&lt;/li&gt;
&lt;li&gt;客户端日志：记录了&lt;code&gt;traceId&lt;/code&gt;和事件类型(曝光、点击、分享等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于客户端日志必然晚于服务端日志，因此两个数据流Join时需要一定的窗口。&lt;/p&gt;
&lt;h2 id=&#34;训练数据扩展&#34;&gt;训练数据扩展&lt;/h2&gt;
&lt;p&gt;但是作为调参工程师，我们必然会遇到需要的特征没有记录在实时打点中，导致训练时缺少相关数据的情况，这个时候，就需要想办法来处理这个问题。&lt;/p&gt;
&lt;p&gt;按照Uber的方法，我们可以把特征分为三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;离线特征&lt;/li&gt;
&lt;li&gt;实时特征&lt;/li&gt;
&lt;li&gt;RPC特征&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;离线特征&#34;&gt;离线特征&lt;/h3&gt;
&lt;p&gt;对于离线特征：我们可以使用Spark读取数据仓库中的历史数据，以天为单位进行生成历史数据，然后放在一个分区的Hive表中。&lt;/p&gt;
&lt;h3 id=&#34;实时特征&#34;&gt;实时特征&lt;/h3&gt;
&lt;p&gt;对于实时特征：基于kappa的思想，我们可以在Flink中编写实时特征计算逻辑，然后启动重跑一段时间以前的历史数据，并记录这个过程中特征的每一次变化（有点类似数据库中的WAL日志流），将其输出到Kafka中去，这样我们也就有一个特征在历史时间段中的值。(这里我们最好有一个服务化的Flink平台，来进行任务的添加、删除、修改等工作)&lt;/p&gt;
&lt;p&gt;这里，特征的计算任务就可以通过特征元数据库进行管理。&lt;/p&gt;
&lt;p&gt;接下来，我们就可以通过带时间戳的Join来完成训练数据和特征数据的拼接，并将特征回写到训练数据中去了。 需要注意的是，为了保证线上线下数据的一致性，我们需要引入一定的延时机制来模拟客户端日志的延迟。&lt;/p&gt;
&lt;h3 id=&#34;rpc特征&#34;&gt;RPC特征&lt;/h3&gt;
&lt;p&gt;最后对于来自外部系统的RPC特征：就没有什么好办法了，我们只能在线上添加这个特征的打点，然后跑上一段时间来得到有这个特征的训练数据了。&lt;/p&gt;
&lt;p&gt;这里推荐一个比较新的开源项目可以完成类似的工作: &lt;a href=&#34;https://github.com/feast-dev/feast&#34;&gt;Feast&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;在线特征推送&#34;&gt;在线特征推送&lt;/h2&gt;
&lt;p&gt;特征的线上存储可以使用KV数据库比如Redis，数据的来源和上面训练数据的扩展可以使用同一套代码，只需要在计算时根据元数据配置来决定是否推送上线。&lt;/p&gt;
&lt;p&gt;另外，这里一般会做很多工程上的优化，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把多个特征作为一个特征组存在一个key里减少请求的次数&lt;/li&gt;
&lt;li&gt;使用一些算法（比如XXHash32）对过长的特征名(比如&lt;code&gt;spu$realtime$orders_last_2w$spu_id&lt;/code&gt;)进行压缩&lt;/li&gt;
&lt;/ul&gt;
- https://sword865.github.io/posts/2021/2021-03-07-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%91%A8%E8%BE%B9%E8%AE%BE%E6%96%BD--%E7%89%B9%E5%BE%81%E5%95%86%E5%BA%97/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>NPE问题与一些语言中的解决方案</title>
        <link>https://sword865.github.io/posts/2018/2018-11-08-npe%E9%97%AE%E9%A2%98%E4%B8%8E%E4%B8%80%E4%BA%9B%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
        <pubDate>Thu, 08 Nov 2018 23:51:35 +0800</pubDate>
        
        <guid>https://sword865.github.io/posts/2018/2018-11-08-npe%E9%97%AE%E9%A2%98%E4%B8%8E%E4%B8%80%E4%BA%9B%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
        <description>悟剑阁 https://sword865.github.io/posts/2018/2018-11-08-npe%E9%97%AE%E9%A2%98%E4%B8%8E%E4%B8%80%E4%BA%9B%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ -&lt;h1 id=&#34;npe问题与一些语言中的解决方案&#34;&gt;NPE问题与一些语言中的解决方案&lt;/h1&gt;
&lt;p&gt;NPE(NullPointerException)是一个很烦人的问题，这里简单列举了一些语言中对NPE的处理。&lt;/p&gt;
&lt;h2 id=&#34;1-通过语法标记进行检查&#34;&gt;1. 通过语法标记进行检查&lt;/h2&gt;
&lt;h3 id=&#34;kotlin&#34;&gt;Kotlin&lt;/h3&gt;
&lt;p&gt;Kotlin要求可以为null的变量必需在定义时声明，同时在读取该类型变量属性时必须进行空值判断。例：String 和 String?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; a: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// compilation error, a can not be null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; b: String? = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// ok
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; l = b.length &lt;span style=&#34;color:#75715e&#34;&gt;// compiler error: variable &amp;#39;b&amp;#39; can be null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; l = &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) b.length &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// ok
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;jetbrains-annotations-for-java&#34;&gt;Jetbrains annotations for Java&lt;/h3&gt;
&lt;p&gt;IntelliJ IDEA提供了一些工具，比如可以对@NotNull的参数进行检查，当出现null赋值时在IDE中会给出提示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.jetbrains.annotations.NotNull;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotNull&lt;/span&gt; Object param){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; param.&lt;span style=&#34;color:#a6e22e&#34;&gt;hashCode&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foo(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// warn in IntelliJ IDEA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（类似的，FindBugs也提供了@Nonnull注释，用于检查）&lt;/p&gt;
&lt;h3 id=&#34;lombok-for-java&#34;&gt;Lombok for Java&lt;/h3&gt;
&lt;p&gt;Lombok通过在编译时改写字节码对原始代码进行优化，其中的@NonNull，会自动插入运行时检查代码，发现错误抛出异常。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NonNullExample&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; Person person) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; person.&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NonNullExample&lt;/span&gt;(Person person) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NullPointerException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person is marked @NonNull but is null&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; person.&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-用更好的错误处理代替null&#34;&gt;2. 用更好的错误处理代替null&lt;/h2&gt;
&lt;p&gt;空值通常都是由错误导致的无法赋值，因此更好的错误处理也是NPE的一种应对。&lt;/p&gt;
&lt;h3 id=&#34;rust基于result错误处理&#34;&gt;Rust：基于Result错误处理&lt;/h3&gt;
&lt;p&gt;Rust通过Result类型提供了强大的错误处理机制。&lt;/p&gt;
&lt;h3 id=&#34;基于monad处理错误&#34;&gt;基于Monad处理错误&lt;/h3&gt;
&lt;p&gt;Scala等FP语言基于Monad(Option, Either, Try&amp;hellip;)提供了错误处理，其中Optional是最基础的一种。在Option中，定义了专门的None来表示计算失败。这样，在得不到结果时，就会得到None，因此在后续的使用中可以使用isDefined先判断是否有值，再进行处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; request getParameter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isDefined&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//do some stuff with name.get
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是这么写很不方便，还是更推荐使用flatMap乃至for推导式来进行计算。(for-yield推导式其实就是flatmap和map的语法糖)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; upper &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; request getParameter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  trimmed &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trim&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  upper &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;trimmed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toUpperCase&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; trimmed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; upper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;upper getOrElse &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于Option只能用None表示失败，不能记录错误信息，所以scala中还提供了Either用来携带更多的信息。&lt;/p&gt;
&lt;h3 id=&#34;optional-in-java&#34;&gt;Optional in Java&lt;/h3&gt;
&lt;p&gt;Java中的Optional跟scala里的Option是很相似的，同样提供了flatMap操作。但是因为没有for推导式，用起来就感觉不太方便。另外，Java中也缺少可以携带错误信息的Either。&lt;/p&gt;
- https://sword865.github.io/posts/2018/2018-11-08-npe%E9%97%AE%E9%A2%98%E4%B8%8E%E4%B8%80%E4%BA%9B%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>比较一下spark2的DataFrame和RDD</title>
        <link>https://sword865.github.io/posts/2017/2017-01-19-%E6%AF%94%E8%BE%83%E4%B8%80%E4%B8%8Bspark2%E7%9A%84dataframe%E5%92%8Crdd/</link>
        <pubDate>Sun, 12 Mar 2017 15:49:45 +0800</pubDate>
        
        <guid>https://sword865.github.io/posts/2017/2017-01-19-%E6%AF%94%E8%BE%83%E4%B8%80%E4%B8%8Bspark2%E7%9A%84dataframe%E5%92%8Crdd/</guid>
        <description>悟剑阁 https://sword865.github.io/posts/2017/2017-01-19-%E6%AF%94%E8%BE%83%E4%B8%80%E4%B8%8Bspark2%E7%9A%84dataframe%E5%92%8Crdd/ -&lt;p&gt;前段时间把spark集群升级到2.x，使用起来感觉相对1.x的版本最大的改动就是DataFrame正式开始替代RDD成为主流，包括我们最常用到的mllib的官方文档也提到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In the Spark 2.x releases, MLlib will add features to the DataFrames-based API to reach feature parity with the RDD-based API.
After reaching feature parity (roughly estimated for Spark 2.2), the RDD-based API will be deprecated.
The RDD-based API is expected to be removed in Spark 3.0.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;rdd的结构&#34;&gt;RDD的结构&lt;/h4&gt;
&lt;p&gt;RDD可以看成是一个分布式的无序列表，这个列表内的元素是一个object，RDD并不关心每个object的内部结构。因此所有操作都必须对这个object进行，不利于算子的复用。&lt;/p&gt;
&lt;p&gt;比起DataFrame，RDD更方便我们对数据做一些底层的操作，也可以用于unstructured的数据。&lt;/p&gt;
&lt;h4 id=&#34;dataframe的结构&#34;&gt;DataFrame的结构&lt;/h4&gt;
&lt;p&gt;DataFrame不同于RDD，框架会去了解object中的数据是什么样的结构，这样每个算子就可以单独实现在某个列上，复用起来就更加简单。&lt;/p&gt;
&lt;p&gt;因为DataFrame比RDD多个更多的限制，对内部的元素也有了更多的了解，可以使用SQL语句进行操作，因此也就可以在对DataFrame进行操作时使用Spark SQL的Catalyst优化器进行优化。&lt;/p&gt;
&lt;p&gt;Catalyst一个易于扩展的查询优化器，同时支持基于规则(rule-based)和基于代价(cost-based)的优化方法，我们可以基于相关API自己定义优化规则。&lt;/p&gt;
&lt;p&gt;最后，Spark的Tungsten目前还只支持DataFrame API, 因此在使用RDD时不能享受到Tungsten带来的效率优化。（Tungsten做的优化概括起来说就是由Spark自己来管理内存而不是使用JVM，这样可以避免JVM GC带来的性能损失）&lt;/p&gt;
&lt;h4 id=&#34;dataset数据结构&#34;&gt;DataSet数据结构&lt;/h4&gt;
&lt;p&gt;前面提到DataFrame每一个record对应了一个Row。而Dataset的定义更加宽松，每一个record对应了一个任意的类型。实际上，从源码中可以看到，DataFrame就是Dataset的一种特例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package object sql {
    ...
    type DataFrame = Dataset[Row]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DataSet和DataFrame可以通过df.as和ds.toDF方法方便的进行转化。&lt;/p&gt;
&lt;p&gt;不同于Row是一个泛化的无类型JVM object, Dataset是由一系列的强类型JVM object组成的，因此DataSet可以在编译时进行类型检查。&lt;/p&gt;
&lt;p&gt;比起RDD，DataSet的API也以Spark SQL引擎为基础，因此在对DataSet进行操作时，同样可以从Catalyst优化器中受益。&lt;/p&gt;
&lt;p&gt;基本上，我觉得DataSet集合了RDD和DataSet两者的优点。&lt;/p&gt;
&lt;h4 id=&#34;关于效率&#34;&gt;关于效率&lt;/h4&gt;
&lt;p&gt;最后，在效率上，在使用RDD的API时候，使用Python明显比Scala要慢上很多（据我们测试是慢了2倍以上）。但是在使用DataFame时，这个缺陷就不复存在了，换句话说，喜欢Python或者放不下各种Python扩展的同志们可以把Python写起来了，哈哈。这里放个国外网友测试的效率比较吧：&lt;/p&gt;
&lt;img src=&#34;../images/Spark_Dataframe_Official_Benchmark.png&#34; /&gt;
&lt;p&gt;可以看到，速度上大致是 Scala DF = Python DF &amp;gt; Scala RDD &amp;gt; Python RDD，并且DF优势很显著。&lt;/p&gt;
&lt;h4 id=&#34;其他参考资料&#34;&gt;其他参考资料&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hustnn/TungstenSecret&#34;&gt;探索Spark Tungsten的秘密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.iteblog.com/archives/1706.html&#34;&gt;Spark 2.0介绍：在Spark SQL中定义查询优化规则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/2015-Review-Spark&#34;&gt;http://www.infoq.com/cn/articles/2015-Review-Spark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/37301226/difference-between-dataset-api-and-dataframe&#34;&gt;http://stackoverflow.com/questions/37301226/difference-between-dataset-api-and-dataframe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://databricks.com/blog/2016/07/14/a-tale-of-three-apache-spark-apis-rdds-dataframes-and-datasets.html&#34;&gt;https://databricks.com/blog/2016/07/14/a-tale-of-three-apache-spark-apis-rdds-dataframes-and-datasets.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://0x0fff.com/spark-dataframes-are-faster-arent-they/&#34;&gt;https://0x0fff.com/spark-dataframes-are-faster-arent-they/&lt;/a&gt;&lt;/p&gt;
- https://sword865.github.io/posts/2017/2017-01-19-%E6%AF%94%E8%BE%83%E4%B8%80%E4%B8%8Bspark2%E7%9A%84dataframe%E5%92%8Crdd/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>谈谈Factorization Machine</title>
        <link>https://sword865.github.io/posts/2016/2016-11-04-%E8%B0%88%E8%B0%88factorization-machine/</link>
        <pubDate>Fri, 04 Nov 2016 22:47:21 +0800</pubDate>
        
        <guid>https://sword865.github.io/posts/2016/2016-11-04-%E8%B0%88%E8%B0%88factorization-machine/</guid>
        <description>悟剑阁 https://sword865.github.io/posts/2016/2016-11-04-%E8%B0%88%E8%B0%88factorization-machine/ -&lt;p&gt;因子分解机(Factorization Machine, 简称FM)是一种不错的CTR预估模型，也是我们现在在使用的广告点击率预估模型，比起著名的Logistic Regression, FM能够把握一些组合的高阶特征，因此拥有更强的表现力。&lt;/p&gt;
&lt;p&gt;在做点击率预估时，我们的特征往往来自于用户(user)、广告(item)和上下文环境(context)，在线性模型中，这些特征不进行组合的话，就会发生一个很尴尬的情况，因为：&lt;/p&gt;
&lt;div&gt;$$score = f(w_{user} * x_{user} + w_{item} * x_{item} + w_{contex} * x_{contex})$$&lt;/div&gt;
&lt;p&gt;所以，对所有用户&amp;ndash;我们将得到相同的排序。&lt;/p&gt;
&lt;p&gt;因此我们需要引入一些组合特征作为输入模型，然而仅二阶特征组合的可能性就是原始特征的平方之多，但是由于很多特征其实是相互独立的，他们的组合并没有什么价值。FM就是一种能够自动把握一些高阶特征的点击率预估模型，可以自动帮助使用者选择合适的高阶输入。&lt;/p&gt;
&lt;p&gt;我们先写出带有所有二阶组合特征的目标函数，其中矩阵W中有n^2个参数，求解非常复杂：&lt;/p&gt;
&lt;div&gt;$$y(x) = w_0 + \sum_{i=1}^{n} w_i x_i + \sum_{i=1}^{n} \sum_{j=i+1}^{n} w_{ij} x_i x_j$$&lt;/div&gt;
&lt;p&gt;我们都知道在矩阵分解的协同过滤中中，我们认为每个用户可以表示成一个K维的特征向量$u_k$,每个物品也能表示成一个高维向量$i_k$，这样用户与物品的相关性就可以用两个向量的点击表示，所有用户与所有物品的相关性就可以用两个矩阵相乘的形式表示出来了。&lt;/p&gt;
&lt;p&gt;FM的模型参考了矩阵分解的思想，认为每个特征 $x_i$都可以用一个K维的特征向量$v_i$表示，那么所有特征之前的相关性就也就可以用两个矩阵的相乘进行表示了，模型表示如下：&lt;/p&gt;
&lt;p&gt;其中矩阵W中代表了特征的特征向量的內积，既：$w_{ij}=v_i v_j$，所以，公式可以改写为:&lt;/p&gt;
&lt;div&gt;$$y(x) = w_0 + \sum_{i=1}^{n} w_i x_i + \sum_{i=1}^{n} \sum_{j=i+1}^{n} v_{i} v_{j} x_i x_j$$&lt;/div&gt;
&lt;p&gt;也就是：&lt;/p&gt;
&lt;div&gt;$$y(x) = w_0 + \sum_{i=1}^{n} w_i x_i + \sum_{i=1}^{n} \sum_{j=i+1}^{n} \sum_{h=i}^{k} v_{i,h} v_{j,h} x_i x_j$$&lt;/div&gt;
&lt;p&gt;可以看出，W中的参数现在只有nk个了，因为一般有k&amp;laquo;n，所以FM大大降低的目标函数的复杂度。推导可得梯度公式：&lt;/p&gt;
&lt;div&gt;$δy/δw_{0}=1$&lt;/div&gt;
&lt;div&gt;$δy/δw_{i}=x_{i},i=1...n$&lt;/div&gt;
&lt;div&gt;$δy/δv_{i,k}=x_{i}\sum{j \neq i} v_{j,k}x_{j}$&lt;/div&gt;
&lt;p&gt;FM的优化可以用SGD来做，不过这里推荐带动量（momentum）的min-batch SGD算法，试验中比普通的SGD效果似乎更好。带momentum的SGD模拟了物品运动中的惯性。&lt;/p&gt;
&lt;p&gt;在传统的SGD中：&lt;span&gt;$x_{t+1}=x_t+Δx_t,Δx_t=-ŋg_t$&lt;/span&gt; ,其中 $g_t$代表了梯度。而在momentum的SGD中：$Δx_t=px_{t-1}-ŋg_t$。&lt;/p&gt;
&lt;p&gt;不过比起LR, FM有一个缺点&amp;ndash;目标函数是非凸的，虽然针对这个缺点也有一些研究比如一些凸函数形式的FM，不过在实践中似乎这并不是一个很严重的问题，合适的初始化方式和优化方法一般是能够给出一个可以接受的解的。&lt;/p&gt;
&lt;p&gt;FM的另外一个缺点是有点耗费内存，对于每个特征都要用一个K维的向量表示导致参数数量是LR的K倍，这方面也是有一些研究的，比如李沐针对这个问题提出的DiFacto就是一个很好的能够降低内存消耗的优化方案。&lt;/p&gt;
&lt;p&gt;最后，还有一种著名的策略是FFM模型，FFM模型被称为FM的升级版，把同一类的特征（比如一些用01向量编码的的离散特征）归到一个field里去，然后要求每个特征在每个field下都有一个不同的K维表示方式，这一下把参数的数量从K变成了FK(F是field的数量)，模型复杂度变的更高了。不过这样做的效果确实不错。&lt;/p&gt;
- https://sword865.github.io/posts/2016/2016-11-04-%E8%B0%88%E8%B0%88factorization-machine/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Elasticsearch-HttpServerModule</title>
        <link>https://sword865.github.io/archives/150/</link>
        <pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate>
        
        <guid>https://sword865.github.io/archives/150/</guid>
        <description>悟剑阁 https://sword865.github.io/archives/150/ -&lt;p&gt;HttpServerModule的请求主要由HttpServer中的HttpServerTransport （默认为NettyHttpServerTransport）类处理。&lt;/p&gt;
&lt;p&gt;NettyHttpServerTransport基于netty框架，负责监听并建立连接，信息的处理由内部类HttpChannelPipelineFactory 完成。&lt;/p&gt;
&lt;p&gt;每当产生一个连接时，都会发出一个ChannelEvent，该Event由一系列的ChannelHandler进行处理。&lt;/p&gt;
&lt;p&gt;为了方便组织，这些ChannelHandler被放在一条“流(pipeline)”里，一个ChannelEvent并不会主动的”流”经所有的Handler，而是由上一个Handler显式的调用ChannelPipeline.sendUp(Down)stream产生，并交给下一个Handler处理。&lt;/p&gt;
&lt;p&gt;换句话说，每个Handler接收到一个ChannelEvent，并处理结束后，如果需要继续处理，那么它需要调用sendUp(Down)stream新发起一个事件。如果它不再发起事件，那么处理就到此结束，即使它后面仍然有Handler没有执行。这个机制可以保证最大的灵活性，当然对Handler的先后顺序也有了更严格的要求。&lt;/p&gt;
&lt;p&gt;在流Pipeline里有一个Map(name2ctx)和一个链表(记录head和tail)，pipeline里面会调度关联的多个channelhandler的运行。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sword865.github.io/posts/_posts/images/0753391.png&#34;&gt;&lt;img src=&#34;https://sword865.github.io/posts/_posts/images/0753391.png&#34; alt=&#34;channel pipeline&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在NettyHttpServerTransport中，会流过的channelhandler就包括解码http请求(把多个HttpChunk拼起来并按http协议进行解析)和http请求处理。&lt;/p&gt;
&lt;p&gt;在处理http请求，数据流向为：HttpRequestHandler-&amp;gt;&lt;span class=&#34;s1&#34;&gt;NettyHttpServerTransport&lt;/span&gt;-&amp;gt;HttpServerAdapter(HttpServer的内部类Dispatche)-&amp;gt;RestController。&lt;/p&gt;
&lt;p&gt;RestController中的处理代码为：&lt;/p&gt;
&lt;pre class=&#34;lang:java decode:true &#34;&gt;
void executeHandler(RestRequest request, RestChannel channel) throws Exception {
        final RestHandler handler = getHandler(request);
        if (handler != null) {
            handler.handleRequest(request, channel);
        } else {
            if (request.method() == RestRequest.Method.OPTIONS) {
                // when we have OPTIONS request, simply send OK by default 
                // (with the Access Control Origin header which gets automatically added)
                channel.sendResponse(new BytesRestResponse(OK));
            } else {
                channel.sendResponse(new BytesRestResponse(
                    BAD_REQUEST, 
                    &#34;No handler found for uri [&#34; + request.uri() + &#34;] and method [&#34; + request.method() + &#34;]&#34;
                ));
            }
        }
    }

    private RestHandler getHandler(RestRequest request) {
        String path = getPath(request);
        RestRequest.Method method = request.method();
        if (method == RestRequest.Method.GET) {
            return getHandlers.retrieve(path, request.params());
        } else if (method == RestRequest.Method.POST) {
            return postHandlers.retrieve(path, request.params());
        } else if (method == RestRequest.Method.PUT) {
            return putHandlers.retrieve(path, request.params());
        } else if (method == RestRequest.Method.DELETE) {
            return deleteHandlers.retrieve(path, request.params());
        } else if (method == RestRequest.Method.HEAD) {
            return headHandlers.retrieve(path, request.params());
        } else if (method == RestRequest.Method.OPTIONS) {
            return optionsHandlers.retrieve(path, request.params());
        } else {
            return null;
        }
    }&lt;/pre&gt;
&lt;p&gt;void executeHandler(RestRequest request, RestChannel channel) throws Exception {
final RestHandler handler = getHandler(request);
if (handler != null) {
handler.handleRequest(request, channel);
} else {
if (request.method() == RestRequest.Method.OPTIONS) {
// when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gets automatically added)
channel.sendResponse(new BytesRestResponse(OK));
} else {
channel.sendResponse(new BytesRestResponse(BAD_REQUEST, &amp;ldquo;No handler found for uri [&amp;rdquo; + request.uri() + &amp;ldquo;] and method [&amp;rdquo; + request.method() + &amp;ldquo;]&amp;rdquo;));
}
}
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private RestHandler getHandler(RestRequest request) {
    String path = getPath(request);
    RestRequest.Method method = request.method();
    if (method == RestRequest.Method.GET) {
        return getHandlers.retrieve(path, request.params());
    } else if (method == RestRequest.Method.POST) {
        return postHandlers.retrieve(path, request.params());
    } else if (method == RestRequest.Method.PUT) {
        return putHandlers.retrieve(path, request.params());
    } else if (method == RestRequest.Method.DELETE) {
        return deleteHandlers.retrieve(path, request.params());
    } else if (method == RestRequest.Method.HEAD) {
        return headHandlers.retrieve(path, request.params());
    } else if (method == RestRequest.Method.OPTIONS) {
        return optionsHandlers.retrieve(path, request.params());
    } else {
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这里会根据注册的handler，选择合适的处理逻辑。&lt;/p&gt;
&lt;p&gt;这些handler由函数registerHandler进行注册，函数签名如下：&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;void&lt;/span&gt; registerHandler(RestRequest.Method &lt;span class=&#34;s2&#34;&gt;method&lt;/span&gt;, String &lt;span class=&#34;s2&#34;&gt;path&lt;/span&gt;, RestHandler &lt;span class=&#34;s3&#34;&gt;handler&lt;/span&gt;)
&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;
  比如对RestGetIndicesAction类，有如下构造函数：
&lt;/p&gt;
&lt;pre class=&#34;lang:java decode:true&#34;&gt;public RestGetIndicesAction(Settings settings, RestController controller, Client client) {
        super(settings, controller, client);
        controller.registerHandler(GET, &#34;/{index}&#34;, this);
        controller.registerHandler(GET, &#34;/{index}/{type}&#34;, this);
    }&lt;/pre&gt;
&lt;p&gt;netty参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/flashsword/blog/162936&#34;&gt;http://my.oschina.net/flashsword/blog/162936&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/flashsword/blog/164237&#34;&gt;http://my.oschina.net/flashsword/blog/164237&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/flashsword/blog/169361&#34;&gt;http://my.oschina.net/flashsword/blog/169361&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/flashsword/blog/178561&#34;&gt;http://my.oschina.net/flashsword/blog/178561&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/flashsword/blog/197963&#34;&gt;http://my.oschina.net/flashsword/blog/197963&lt;/a&gt;&lt;/p&gt;
- https://sword865.github.io/archives/150/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Tornado框架简析</title>
        <link>https://sword865.github.io/archives/100/</link>
        <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
        
        <guid>https://sword865.github.io/archives/100/</guid>
        <description>悟剑阁 https://sword865.github.io/archives/100/ -&lt;p&gt;Tornado是一款轻量级的Web服务器，同时又是一个开发框架。采用单线程非阻塞I/O模型(epoll)，主要是为了应对高并发 访问量而被开发出来，尤其适用于comet应用。&lt;/p&gt;
&lt;p&gt;Tornado服务器3大核心模块:&lt;/p&gt;
&lt;p&gt;(1) IOLoop&lt;/p&gt;
&lt;p&gt;Tornado为了实现高并发和高性能，使用了一个IOLoop来处理socket的读写事件，IOLoop基于epoll，可以高效的响应网络事件。这是Tornado高效的保证。&lt;/p&gt;
&lt;p&gt;tornado.ioloop.IOLoop.instance().start()&lt;/p&gt;
&lt;p&gt;IOLoop使用了单例模式，处理所有IO事件，&lt;/p&gt;
&lt;p&gt;实现为EPollIOLoop-&amp;gt;PollIOLoop-&amp;gt;IOLoop-&amp;gt;Configurable&lt;/p&gt;
&lt;p&gt;IOLoop中有四个重要的数据集： _events 和 _handlers 保存I/O事件和对应的处理器， _callbacks 和 _timeouts 保存（超时）回调。&lt;/p&gt;
&lt;p&gt;关键函数：&lt;/p&gt;
&lt;pre class=&#34;lang:python decode:true &#34;&gt;def initialize(self, impl, time_func=None):
    super(PollIOLoop, self).initialize()
    self._impl = impl
    if hasattr(self._impl, &#39;fileno&#39;):
        set_close_exec(self._impl.fileno())
    self.time_func = time_func or time.time
    #handlers 是一个函数集字典
    self._handlers = {}
    self._events = {}
    #回调函数集合
    self._callbacks = []
    self._callback_lock = threading.Lock()
    self._timeouts = []
    self._cancellations = 0
    self._running = False
    self._stopped = False
    self._closing = False
    self._thread_ident = None
    self._blocking_signal_threshold = None
    self._timeout_counter = itertools.count()

    # Create a pipe that we send bogus data to when we want to wake
    # the I/O loop when it is idle
    self._waker = Waker()
    self.add_handler(self._waker.fileno(),
                     lambda fd, events: self._waker.consume(),
                     self.READ)&lt;/pre&gt;
&lt;p&gt;其中，waker是一个发伪数据用的类，在需要时，我们可以用它唤醒空闲的I/O Loop。当我们调用add_callback时，为了让回调函数运行，可能会需要使用它发送一个伪数据。&lt;/p&gt;
&lt;pre class=&#34;lang:python decode:true&#34;&gt;#将文件描述符发生相应的事件时的回调函数对应
def add_handler(self, fd, handler, events):
    &#34;&#34;&#34;Registers the given handler to receive the given events for fd.&#34;&#34;&#34;
    self._handlers[fd] = stack_context.wrap(handler)
    #在 epoll 中注册对应事件
    #epoll_ctl
    self._impl.register(fd, events | self.ERROR)
&lt;/pre&gt;
&lt;p&gt;其中stack_context.wrap()对handler进行封装，封装后记录了上下文信息。而_impl是对epoll的封装。&lt;/p&gt;
&lt;p&gt;所以，只要把所有事件在IOLoop中进行注册，运行start函数后，就会进入进程的监听循环，循环监听所有的fd，并调用fd对应的handler。循环过程参考start()函数。&lt;/p&gt;
&lt;pre class=&#34;lang:python decode:true&#34;&gt;def start(self):
    while True:
        with self._callback_lock:
            callbacks = self._callbacks
            self._callbacks = []
        #运行所有callback
        for callback in callbacks:
            self._run_callback(callback)
        #取事件
        event_pairs = self._impl.poll(poll_timeout)
        self._events.update(event_pairs)
        while self._events:
            fd, events = self._events.popitem()
            try:
                #调用事件handler
                fd_obj, handler_func = self._handlers[fd]
                handler_func(fd_obj, events)
            except (OSError, IOError) as e:
                if errno_from_exception(e) == errno.EPIPE:
                    # Happens when the client closes the connection
                    pass
                else:
                    self.handle_callback_exception(self._handlers.get(fd))
            except Exception:
                self.handle_callback_exception(self._handlers.get(fd))
&lt;/pre&gt;
&lt;p&gt;当poll中发现fp有read事件时，会调用对应的callback方法。如果fd是监听的fd，那么这个回调handler就是accept_handler函数(见下面HttpConnection的bind和add_scokets函数)。该方法会Accept连接并且紧跟着创建IOStream对象，read_until方法读完数据后，则调用_run_callback把处理函数（self._header_callback）加到IOLoop中，等到下次轮询时在最前面处理。&lt;/p&gt;
&lt;p&gt;(2) IOStream&lt;/p&gt;
&lt;p&gt;为了在处理请求的时候，实现对socket的异步读写， Tornado实现了IOStream类，用来处理socket的异步读写，负责异步通讯。&lt;/p&gt;
&lt;p&gt;主要包括3个函数，&lt;/p&gt;
&lt;p&gt;1.read_bytes(bytes,callback)在有固定的字节的数据到来的时候调用回调函数&lt;/p&gt;
&lt;p&gt;2.read_until(delimiter,callback)在读取到固定的字符序列结尾后调用回调函数&lt;/p&gt;
&lt;p&gt;3.write(data)：异步写&lt;/p&gt;
&lt;p&gt;(3) HTTPConnection&lt;/p&gt;
&lt;p&gt;这个类用来处理http的请求， 包括读取http请求头， 读取post过来的数据，调用用户自定义的处理方法。以及把响应数据写给客户端socket。&lt;/p&gt;
&lt;pre class=&#34;lang:python decode:true&#34;&gt;def bind(self, port, address=None, family=socket.AF_UNSPEC, backlog=128): 
    sockets = bind_sockets(port, address=address, family=family,backlog=backlog)
        if self._started:
            self.add_sockets(sockets)
        else:
            self._pending_sockets.extend(sockets)
def add_sockets(self, sockets):
    if self.io_loop is None:
        self.io_loop = IOLoop.current()
    for sock in sockets:
        self._sockets[sock.fileno()] = sock
        add_accept_handler(sock, self._handle_connection,io_loop=self.io_loop)
&lt;/pre&gt;
&lt;p&gt;socket启动后，监听各个sockets，事件到来时，调用_handle_connection。&lt;/p&gt;
&lt;pre class=&#34;lang:python decode:true &#34;&gt;def _handle_connection(self, connection, address):
    if self.ssl_options is not None:
        connection = ssl_wrap_socket(connection,self.ssl_options,
                                     server_side=True,
                                     do_handshake_on_connect=False)
        if self.ssl_options is not None:
            stream = SSLIOStream(connection, io_loop=self.io_loop,
                                 max_buffer_size=self.max_buffer_size,
                                 read_chunk_size=self.read_chunk_size)
        else:
            stream = IOStream(connection, io_loop=self.io_loop,
                              max_buffer_size=self.max_buffer_size,
                              read_chunk_size=self.read_chunk_size)
        self.handle_stream(stream, address)
def handle_stream(self, stream, address):
    context = _HTTPRequestContext(stream, address,
                                  self.protocol)
    conn = HTTP1ServerConnection(
        stream, self.conn_params, context)
    self._connections.add(conn)
    conn.start_serving(self)
def start_serving(self, delegate):
    assert isinstance(delegate, httputil.HTTPServerConnectionDelegate)
    self._serving_future = self._server_request_loop(delegate)
    # Register the future on the IOLoop so its errors get logged.
    self.stream.io_loop.add_future(self._serving_future,
                                   lambda f: f.result())
&lt;/pre&gt;
&lt;p&gt;如前面所述，这里Accept连接并且紧跟着创建IOStream对象(不考虑https)，调用handle_stream-&amp;gt;start_serving-&amp;gt;_server_request_loop处理请求。最后会调用_read_message读取数据，并注册回调函数。&lt;/p&gt;
&lt;p&gt;最后抄一张图过来：&lt;/p&gt;
&lt;img class=&#34;alignnone wp-image-108 size-large&#34; src=&#34;https://sword865.github.io/wp-content/uploads/2015/02/QQ20150205-1@2x-1024x593.png&#34; alt=&#34;QQ20150205-1@2x&#34; width=&#34;615&#34; height=&#34;356&#34; /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html&#34;&gt;http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kenby.iteye.com/blog/1159621&#34;&gt;http://kenby.iteye.com/blog/1159621&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.nowamagic.net/academy/detail/13321030&#34;&gt;http://www.nowamagic.net/academy/detail/13321030&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.yeolar.com/note/2013/02/09/tornado-async-networking/&#34;&gt;http://www.yeolar.com/note/2013/02/09/tornado-async-networking/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tornadoweb/tornado&#34;&gt;https://github.com/tornadoweb/tornado&lt;/a&gt;&lt;/p&gt;
&lt;p style=&#34;margin:0;padding:0;height:1px;overflow:hidden;&#34;&gt;
  &lt;a href=&#34;http://www.wumii.com/widget/relatedItems&#34; style=&#34;border:0;&#34;&gt;&lt;img src=&#34;http://static.wumii.cn/images/pixel.png&#34; alt=&#34;无觅相关文章插件，快速提升流量&#34; style=&#34;border:0;padding:0;margin:0;&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;
- https://sword865.github.io/archives/100/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Lucene索引文件学习</title>
        <link>https://sword865.github.io/archives/86/</link>
        <pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate>
        
        <guid>https://sword865.github.io/archives/86/</guid>
        <description>悟剑阁 https://sword865.github.io/archives/86/ -&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt; 最近在做搜索，抽空看一下lucene，资料挺多的，不过大部分都是3.x了……在对着官方文档大概看一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;优化后的lucene索引文件(4.9.0)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;&lt;img title=&#34;NewImage.png&#34; src=&#34;https://sword865.github.io/wp-content/uploads/2015/02/NewImage.png&#34; alt=&#34;NewImage&#34; width=&#34;200&#34; height=&#34;146&#34; border=&#34;0&#34; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;一、段文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;1.段文件：segments_5p和segments.gen。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;segments.gen保存当前段文件版本信息。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;color: #353833; font-family: Arial, Helvetica, sans-serif; font-size: 12px;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;&lt;tt style=&#34;font-size: 1.2em;&#34;&gt;segments.gen&lt;/tt&gt;: GenHeader, Generation, Generation, Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;segments_N（segments_5p）保存最新的段的信息，包括段的个数，每个段的段名、文档数等信息。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;font-size: 12px; color: #353833; font-family: Arial, Helvetica, sans-serif;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;&lt;tt style=&#34;font-size: 1.2em;&#34;&gt;segments_N&lt;/tt&gt;: Header, Version, NameCounter, SegCount, &lt;SegName, SegCodec, DelGen, DeletionCount, FieldInfosGen, DocValuesGen, UpdatesFiles&gt;&lt;sup style=&#34;font-size: 0.6em;&#34;&gt;SegCount&lt;/sup&gt;, CommitUserData, Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：SegmentInfos.read(Directory directory, String segmentFileName):&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;2.段信息：*.si，存储段的基本信息。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;color: #353833; font-family: Arial, Helvetica, sans-serif; font-size: 12px;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;&lt;tt style=&#34;font-size: 1.2em;&#34;&gt;.si&lt;/tt&gt;: Header, SegVersion, SegSize, IsCompoundFile, Diagnostics, Attributes, Files&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;       只对4.0-4.5使用，新版已经抛弃了，可以无视。  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;二、域文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;1.域(field)：*.fnm ，存储域的信息。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;font-size: 12px; color: #353833; font-family: Arial, Helvetica, sans-serif;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;FieldInfos (.fnm) &amp;#8211;&gt; Header,FieldsCount, &lt;FieldName,FieldNumber, FieldBits,DocValuesBits,DocValuesGen,Attributes&gt; &lt;sup style=&#34;font-size: 0.6em; color: #353833; font-family: Arial, Helvetica, sans-serif;&#34;&gt;FieldsCount&lt;/sup&gt;,Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
  &lt;p style=&#34;margin: 0px; font-size: 11px; font-family: Monaco;&#34;&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：org.apache.lucene.codecs.lucene46.Lucene46FieldInfosFormat&lt;/span&gt;
  &lt;/p&gt;
  &lt;p style=&#34;margin: 0px; font-size: 11px; font-family: Monaco;&#34;&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;2.域(field)索引：*.fdx，存储到域数据的指针。&lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;ul style=&#34;color: #353833; font-family: Arial, Helvetica, sans-serif; font-size: 12px;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;FieldsIndex (.fdx) &amp;#8211;&gt; &lt;Header&gt;, &lt;ChunkIndex&gt;&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;   源码参考：org.apache.lucene.codecs.lucene41.Lucene41StoredFieldsFormat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;3.域(field)数据：*.fdt，存储文档的域，话说这个结构比较复杂，简单列一下。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;font-size: 12px; color: #353833; font-family: Arial, Helvetica, sans-serif;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;FieldData (.fdt) &amp;#8211;&gt; &lt;Header&gt;, PackedIntsVersion, &lt;Chunk&gt;&lt;sup style=&#34;font-size: 0.6em;&#34;&gt;ChunkCount&lt;/sup&gt;&lt;/span&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;ChunkCount is not known in advance and is the number of chunks necessary to store all document of the segment&lt;/span&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;Chunk &amp;#8211;&gt; DocBase, ChunkDocs, DocFieldCounts, DocLengths, &lt;CompressedDocs&gt;&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：org.apache.lucene.codecs.lucene41.Lucene41StoredFieldsFormat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;三、字典文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;4.项(term)字典：*.tim，存储项的信息。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;color: #353833; font-family: Arial, Helvetica, sans-serif; font-size: 12px;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;TermsDict (.tim) &amp;#8211;&gt; Header, &lt;em&gt;PostingsHeader&lt;/em&gt;, NodeBlock&lt;sup style=&#34;font-size: 0.6em;&#34;&gt;NumBlocks&lt;/sup&gt;, FieldSummary, DirOffset, Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：org.apache.lucene.codecs.lucene41.Lucene41PostingsFormat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;5.项(term)索引：*.tip，到项字典的索引。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;color: #353833; font-family: Arial, Helvetica, sans-serif; font-size: 12px;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;TermsIndex (.tip) &amp;#8211;&gt; Header, FSTIndex&lt;sup style=&#34;font-size: 0.6em;&#34;&gt;NumFields&lt;/sup&gt; &lt;IndexStartFP&gt;&lt;sup style=&#34;font-size: 0.6em;&#34;&gt;NumFields&lt;/sup&gt;, DirOffset, Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：org.apache.lucene.codecs.lucene41.Lucene41PostingsFormat &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;四、其他文件 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;6.频率：*.doc，包括一个文档列表，列表中每一个项都有一个频数。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;color: #353833; font-family: Arial, Helvetica, sans-serif; font-size: 12px;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;docFile(.doc) &amp;#8211;&gt; Header, &lt;TermFreqs, SkipData?&gt;&lt;sup style=&#34;font-size: 0.6em;&#34;&gt;TermCount&lt;/sup&gt;, Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：org.apache.lucene.codecs.lucene41.Lucene41PostingsFormat &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;7.位置：*.pos，存储项在索引中出现的位置信息。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;color: #353833; font-family: Arial, Helvetica, sans-serif; font-size: 12px;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;PosFile(.pos) &amp;#8211;&gt; Header, &lt;TermPositions&gt; &lt;sup style=&#34;font-size: 0.6em;&#34;&gt;TermCount&lt;/sup&gt;, Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：org.apache.lucene.codecs.lucene41.Lucene41PostingsFormat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt; 8.norm文件：&lt;em&gt;.nvd，&lt;/em&gt;.nvm，编码文档和域的长度已经boost factors。&lt;/span&gt;&lt;/p&gt;
&lt;ul style=&#34;font-size: 12px; color: #353833; font-family: Arial, Helvetica, sans-serif;&#34;&gt;
  &lt;li&gt;
    &lt;span style=&#34;font-size: 12px;&#34;&gt;Norms data (.nvd) &amp;#8211;&gt; Header,&lt;Uncompressed | TableCompressed | DeltaCompressed&gt;&lt;sup style=&#34;font-size: 0.6em; color: #353833; font-family: Arial, Helvetica, sans-serif;&#34;&gt;NumFields&lt;/sup&gt;,Footer&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;  源码参考：org.apache.lucene.codecs.lucene49.Lucene49NormsFormat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt; 除此之外，还可能有一些其他文件，暂且不表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt; 参考：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;&lt;a href=&#34;http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/codecs/lucene49/package-summary.html#File_Naming&#34;&gt;&lt;a href=&#34;http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/codecs/lucene49/package-summary.html#File_Naming&#34;&gt;http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/codecs/lucene49/package-summary.html#File_Naming&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;&lt;a href=&#34;http://www.cnblogs.com/forfuture1978/category/300665.html&#34;&gt;&lt;a href=&#34;http://www.cnblogs.com/forfuture1978/category/300665.html&#34;&gt;http://www.cnblogs.com/forfuture1978/category/300665.html&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
- https://sword865.github.io/archives/86/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>关于</title>
        <link>https://sword865.github.io/about/</link>
        <pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate>
        
        <guid>https://sword865.github.io/about/</guid>
        <description>悟剑阁 https://sword865.github.io/about/ -&lt;p&gt;这里是我的技术博客。&lt;/p&gt;
&lt;p&gt;对什么都感兴趣的推荐系统系统工程师。&lt;/p&gt;
- https://sword865.github.io/about/ - Copyright (c) 2015. All rights reserved.</description>
        </item>
    
    
  </channel>
</rss> 