<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web - 后台 on 悟剑阁</title>
    <link>https://sword865.github.io/categories/web---%E5%90%8E%E5%8F%B0/</link>
    <description>Recent content in Web - 后台 on 悟剑阁</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Thu, 05 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sword865.github.io/categories/web---%E5%90%8E%E5%8F%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tornado框架简析</title>
      <link>https://sword865.github.io/archives/100/</link>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/100/</guid>
      <description>&lt;p&gt;Tornado是一款轻量级的Web服务器，同时又是一个开发框架。采用单线程非阻塞I/O模型(epoll)，主要是为了应对高并发 访问量而被开发出来，尤其适用于comet应用。&lt;/p&gt;&#xA;&lt;p&gt;Tornado服务器3大核心模块:&lt;/p&gt;&#xA;&lt;p&gt;(1) IOLoop&lt;/p&gt;&#xA;&lt;p&gt;Tornado为了实现高并发和高性能，使用了一个IOLoop来处理socket的读写事件，IOLoop基于epoll，可以高效的响应网络事件。这是Tornado高效的保证。&lt;/p&gt;&#xA;&lt;p&gt;tornado.ioloop.IOLoop.instance().start()&lt;/p&gt;&#xA;&lt;p&gt;IOLoop使用了单例模式，处理所有IO事件，&lt;/p&gt;&#xA;&lt;p&gt;实现为EPollIOLoop-&amp;gt;PollIOLoop-&amp;gt;IOLoop-&amp;gt;Configurable&lt;/p&gt;&#xA;&lt;p&gt;IOLoop中有四个重要的数据集： _events 和 _handlers 保存I/O事件和对应的处理器， _callbacks 和 _timeouts 保存（超时）回调。&lt;/p&gt;&#xA;&lt;p&gt;关键函数：&lt;/p&gt;&#xA;&lt;pre class=&#34;lang:python decode:true &#34;&gt;def initialize(self, impl, time_func=None):&#xD;&#xA;    super(PollIOLoop, self).initialize()&#xD;&#xA;    self._impl = impl&#xD;&#xA;    if hasattr(self._impl, &#39;fileno&#39;):&#xD;&#xA;        set_close_exec(self._impl.fileno())&#xD;&#xA;    self.time_func = time_func or time.time&#xD;&#xA;    #handlers 是一个函数集字典&#xD;&#xA;    self._handlers = {}&#xD;&#xA;    self._events = {}&#xD;&#xA;    #回调函数集合&#xD;&#xA;    self._callbacks = []&#xD;&#xA;    self._callback_lock = threading.Lock()&#xD;&#xA;    self._timeouts = []&#xD;&#xA;    self._cancellations = 0&#xD;&#xA;    self._running = False&#xD;&#xA;    self._stopped = False&#xD;&#xA;    self._closing = False&#xD;&#xA;    self._thread_ident = None&#xD;&#xA;    self._blocking_signal_threshold = None&#xD;&#xA;    self._timeout_counter = itertools.count()&#xD;&#xA;&#xD;&#xA;    # Create a pipe that we send bogus data to when we want to wake&#xD;&#xA;    # the I/O loop when it is idle&#xD;&#xA;    self._waker = Waker()&#xD;&#xA;    self.add_handler(self._waker.fileno(),&#xD;&#xA;                     lambda fd, events: self._waker.consume(),&#xD;&#xA;                     self.READ)&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;其中，waker是一个发伪数据用的类，在需要时，我们可以用它唤醒空闲的I/O Loop。当我们调用add_callback时，为了让回调函数运行，可能会需要使用它发送一个伪数据。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
