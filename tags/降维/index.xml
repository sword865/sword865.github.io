<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>降维 on 悟剑阁</title>
    <link>https://sword865.github.io/tags/%E9%99%8D%E7%BB%B4/</link>
    <description>Recent content in 降维 on 悟剑阁</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Sun, 20 Sep 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sword865.github.io/tags/%E9%99%8D%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法总结7—多维缩放</title>
      <link>https://sword865.github.io/posts/archives/2009-09-20-%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%937-%E5%A4%9A%E7%BB%B4%E7%BC%A9%E6%94%BE/</link>
      <pubDate>Sun, 20 Sep 2009 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/posts/archives/2009-09-20-%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%937-%E5%A4%9A%E7%BB%B4%E7%BC%A9%E6%94%BE/</guid>
      <description>&lt;p&gt;一直没有时间写…..唉&lt;/p&gt;&#xA;&lt;p&gt;这个东西好像是属于数据可视化？反正就是把多维的数据降到低维空间但是仍然尽可能的保持原来数据之间的距离关系(就是在原来维度下离的远的点仍然离得远，接近的点仍然接近) 。最常见的应该就是降到2维以方便打印和屏幕输出。&lt;/p&gt;&#xA;&lt;p&gt;算法的输入是所有数据在高维情况下两两之间的距离（记i与j的距离为Dij）。现在以降到2维为例说明这个算法。&lt;/p&gt;&#xA;&lt;p&gt;首先我们把所有数据点随机绘制在一张二维图像上，然后计算它们两两之间的距离dij，然后我们计算出它与高维距离Dij的误差，根据这些误差，我们将每对数据点按比例移近或移远，然后重新计算所有dij，不断重复到我们没法减少误差为止。&lt;/p&gt;&#xA;&lt;p&gt;还是来具体说明一下吧，假设有n个点&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;输入每一对点之间的距离Dij。&lt;/li&gt;&#xA;&lt;li&gt;随机在2维平面生成n个点，点i坐标记为x[i]、y[i]，计算它们两之间的距离，记为dij.&lt;/li&gt;&#xA;&lt;li&gt;对所有i 和j计算：eij=(dij-Dij) / Dij，每个点用一个二维的值grad[k]来表示它要移动的距离的比例因子(初始为0,0)。在计算出每个eij后，计算 ((x[i]-x[j]) / dij)* eij，然后把它加到grad[i][x]上，同样把((y[i]-y[j]) / dij)* eij加到grad[i][y]上。&lt;/li&gt;&#xA;&lt;li&gt;把所有eij的绝对值相加，为总误差，与前一次的总误差比较(初始化为无穷大)，大于前一次的话就停止。否则把它作为上一次总误差，继续。&lt;/li&gt;&#xA;&lt;li&gt;对每个点，新的坐标为x[i] -= rate * grad[i][x]  y[i] -= rate*grad[i][y]，其中rate是开始时自己定义的一个常数参数，该参数影响了点的移动速度。重新计算各个dij，回到3。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;伪码：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    for m = 1 to 1000{&#xD;&#xA;      for i=1 to n&#xD;&#xA;        for  j = 1 to n&#xD;&#xA;          dij=sqrt((x[i] – x[j])^2+(y[i]-y[j])^2)&#xD;&#xA;      for i=1 to n&#xD;&#xA;        gradi=0&#xD;&#xA;      totale=0&#xD;&#xA;      for i= 1 to n&#xD;&#xA;        for j= 1 to n{&#xD;&#xA;           if(j==i) continue&#xD;&#xA;             eij=(dij-Dij) / Dij&#xD;&#xA;             grad[i][0]+= ((x[i] - x[j]) / dij)* eij&#xD;&#xA;             grad[i][1]+=((y[i] - y[j]) / dij)* eij&#xD;&#xA;             totale+=abs(eij)&#xD;&#xA;           }&#xD;&#xA;      if (laste &amp;amp;lt; totale) break;&#xD;&#xA;      laste=totale&#xD;&#xA;      for i=1 to n{&#xD;&#xA;        x[i] -= rate * grad[i][x]&#xD;&#xA;        y[i] - = rate* grad[i][y]&#xD;&#xA;      }&#xD;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
