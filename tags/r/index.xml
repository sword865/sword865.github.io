<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on 悟剑阁</title>
    <link>https://sword865.github.io/tags/r/</link>
    <description>Recent content in R on 悟剑阁</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Sat, 30 Jun 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sword865.github.io/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R语言系列—-区间估计</title>
      <link>https://sword865.github.io/archives/11/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/11/</guid>
      <description>&lt;p&gt;这一篇讲的是区间估计…..因为这不是一个关于统计学的系列，所以对文中出现的公式不会给予任何证明…..就是这样。&lt;/p&gt;&#xA;&lt;p&gt;就从一个最简单的正态分布的方差已知时，求均值的置信区间开始吧。&lt;/p&gt;&#xA;&lt;p&gt;书上的公式告诉我们这个区间是 $$\overline{x}\pm(\sigma/\sqrt{n})z_{(1-\sigma/2)}$$ ,其中Z&lt;sub&gt;p&lt;/sub&gt;表示的是正态分布N(0,1)下侧的p分位数。&lt;/p&gt;&#xA;&lt;p&gt;我们用R来实现求得这一结果的过程。下面设x里存储了给出的样本，sigma表示已知的方差，n表示样本的个数， alpha则是(1-置信水平)&lt;/p&gt;&#xA;&lt;pre class=&#34;lang:r decode:true&#34;&gt;mean&amp;lt;-mean(x)&#xD;&#xA;ans&amp;lt;-c(mean-sigma*qnorm(1-alpha / 2)/sqrt(n) , mean+sigma*qnorm(1-alpha / 2)/sqrt(n))&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;这样,ans就存储了要求的置信区间。&lt;/p&gt;&#xA;&lt;p&gt;来解释一下吧，先用mean(x)求出样本的平均值，然后用qnorm(1-alpha / 2)求出Z&lt;sub&gt;1-a/2&lt;/sub&gt;，（还记得么？前缀q是分位数函数，）剩下的就是套公式的加减法了。&lt;/p&gt;&#xA;&lt;p&gt;这里的qnorm(1-alpha / 2)其实省略了很多参数，完整一些的写法是&lt;/p&gt;&#xA;&lt;pre class=&#34;lang:r decode:true&#34;&gt;qnorm(1-alpha/2,mean=0,sd=1,lower.tail=TRUE)&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;第一个参数就不用解释了，第二,三个参数mean=0,sd=1，表示这是一个标准正态分布(不同于前面，这里增加了mean=和sd=，这种做法的好处是可以改变参数的顺序，但是结果是一样的)，最后一个参数lower.tail这个参数的意思就比较有意思了，官方解释如下：&lt;/p&gt;&#xA;&lt;p&gt;if TRUE (default), probabilities are $P[X &amp;lt;= x]$, otherwise, $P[X &amp;gt; x]$.&lt;/p&gt;&#xA;&lt;p&gt;明白了么?等于真的话，得出的就是X&amp;lt;=x的分位数，为假的话就是从X&amp;gt;x的方法寻找这个值。一般我们用默认的真就可以了。&lt;/p&gt;&#xA;&lt;p&gt;接下来我们把它整理成一个函数，方便使用&lt;/p&gt;&#xA;&lt;pre class=&#34;lang:r decode:true&#34;&gt;z.test&amp;lt;-function(x,n,sigma,alpha){&#xD;&#xA;mean&amp;lt;-mean(x)&#xD;&#xA;ans&amp;lt;-c(&#xD;&#xA;  mean-sigma*qnorm(1-alpha/2,mean=0,sd=1,lower.tail=TRUE)/sqrt(n),mean+sigma*qnorm(1-alpha/2,mean=0,sd=1,lower.tail=TRUE)/sqrt(n))&#xD;&#xA;ans&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;这样我们就可以直接使用z.test()完成对u的置信区间的计算。&lt;/p&gt;&#xA;&lt;p&gt;比如，有10个样本，分别是175,176,173,175,174,173,173,176,173,179。标准差为1.5，求均值95%的置信区间：&lt;/p&gt;&#xA;&lt;pre class=&#34;lang:r decode:true  &#34;&gt;x&amp;lt;-c(175,176,173,175,174,173,173,176,173,179)&#xD;&#xA;z.test(x,10,1.5,0.05)&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;则返回置信区间：&lt;/p&gt;&#xA;&lt;p&gt;[1]173.7703 175.6297&lt;/p&gt;</description>
    </item>
    <item>
      <title>R语言系列—-数据描述</title>
      <link>https://sword865.github.io/archives/10/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/10/</guid>
      <description>&lt;p&gt;简单来说，R语言是一种主要用于统计分析、绘图的语言和操作环境。的源代码可自由下载使用，亦有已编译的执行档版本可以下载，可在多种平台下运行，包括UNIX（也包括FreeBSD和Linux）、Windows和MacOS。R主要是以命令行操作，同时有人开发了几种图形用户界面。&lt;/p&gt;&#xA;&lt;div&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;           为什么我会使用R语言呢？毕竟我们还有SPSS,SAS，S等其他工具。就我个人而言(其实对很多人也是这样)有两个原因&amp;#8212;-R的开源与其极高的自由度。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    R是开源的，是属于GNU系统的一个自由、免费、源代码开放的软件因此在使用它时我们不用担心使用的资格问题。（当然对人一般人来说其他软件也可以使用盗版…起码国内是这样）另外作为一种语言，R拥有极高的自由度&amp;#8212;-对于，很多新的统计学模型，也许SPSS等软件根本无法处理&amp;#8212;你只能使用系统提供的有限选项。但是在R语言中，你可以自己去实现它。这也是学术界对R如此关注的原因。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    敲了这么多废话，进入正题。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    这一篇的内容是数据描述，就冲R中内嵌的一些简单分布开始吧。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    R语言中提供了四类有关统计分布的函数（密度函数，累计分布函数，分位函数，随机数函数）。分别在代表该分布的R函数前加上相应前缀获得(d，p，q，r)。如正态分布的函数是norm，命令dnorm(0)就可以获得正态分布的密度函数在0处的值(0.3989)(默认为标准正态分布)。同理pnorm(0)是0.5就是正态分布的累计密度函数在0处的值。而qnorm(0.5)则得到的是0，即标准正态分布在0.5处的分位数是0（在来个比较常用的：qnorm(0.975)就是那个估计中经常用到的1.96了）。最后一个rnorm(n)则是按正态分布随机产生n个数据。上面正态分布的参数平均值和方差都是默认的0和１，你可以通过在函数里显示指定这些参数对其进行更改。如dnorm(0,1,2)则得出的是均值为1，标准差为2的正态分布在0处的概率值。要注意的是()内的顺序不能颠倒。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;           接下来我们用R来生成一个二项分布分布的图形吧。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;           binom是二项分布。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;pre class=&#34;lang:r decode:true &#34;&gt;n&amp;lt;-20&#xD;&#xA;p&amp;lt;-0.2&#xD;&#xA;k&amp;lt;-seq(0,n)&#xD;&#xA;plot(k,dbinom(k,n,p))&lt;/pre&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    R语言中用&lt;-给变量赋值，我们先让n=20，p=0.2然后用函数seq生成一个向量(1,2,3&amp;#8230;20)并将其赋于k。然后用polt函数画图。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;           在这里，我们用dbinom(k,n,p)生成了参数为n，p的二项分布在1….20处的概率值，然后以k的各个值为横坐标，dbinom(k,n,p)的各个值为纵坐标，绘图。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    然后我们来看一些R对数据性质的描述。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    &lt;strong&gt;绘制直方图：&lt;/strong&gt;hist(x),横轴表示变量取值，纵轴表示频率。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;pre class=&#34;lang:r decode:true&#34;&gt;x&amp;lt;-c(1,2,3,4,5)&#xD;&#xA;hist(x)&lt;/pre&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    (R语言中的向量前要求加c进行说明，故第一步是让x为一个值为(1,2,3,4,5)的向量，当然也可以看成一个值为1,2,3,4,5的样本)&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    我们来画二项分布的直方图吧&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;pre class=&#34;lang:r decode:true &#34;&gt;N&amp;lt;-10000&#xD;&#xA;n&amp;lt;-100&#xD;&#xA;p&amp;lt;-0.9&#xD;&#xA;x&amp;lt;-rbinom(x,n,p)&#xD;&#xA;hist(x)&lt;/pre&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    思考一下,上面的代码是怎样运作的?&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    &lt;strong&gt;绘制茎叶图&lt;/strong&gt;： stem(x)&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;pre class=&#34;lang:r decode:true&#34;&gt;x&amp;lt;-c(11,12,13,21,22,23)&#xD;&#xA;stem(x)&lt;/pre&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    结果如下：&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;    The decimal point is 1 digit(s) to the right of the |&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;      1 | 123&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;      1 |&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;    2 | 123&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;    另外还有&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;    &lt;strong&gt;盒图：&lt;/strong&gt;boxplot(x)&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;    在各种图形之后，就是对数据的数值型描述了，包括&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;p align=&#34;left&#34;&gt;&#xD;&#xA;    最大值max(x)，最小值min(x),中位数median(x)，五个分位数fivenum(x)，平均数mean(x),样本方差var(x)，样本标准差sd(x)，样本偏度系数skewness(x)，峰度系数kurtosis(x)等等。&#xD;&#xA;  &lt;/p&gt;&#xD;&#xA;  &lt;pre class=&#34;lang:r decode:true &#34;&gt;N&amp;lt;-10000&#xD;&#xA;n&amp;lt;-100&#xD;&#xA;p&amp;lt;-0.9&#xD;&#xA;x&amp;lt;-rbinom(x,n,p)&#xD;&#xA;max(x)&#xD;&#xA;min(x)&#xD;&#xA;median(x)&#xD;&#xA;fivenum(x)&#xD;&#xA;mean(x)&#xD;&#xA;var(x)&#xD;&#xA;sd(x)&#xD;&#xA;library(fBasics)&#xD;&#xA;skewness(x)&#xD;&#xA;kurtosis(x)&lt;/pre&gt;&#xD;&#xA;  &lt;p&gt;&#xD;&#xA;    就可以得到生成的随机数据的各种描述。&#xD;&#xA;  &lt;/p&gt;</description>
    </item>
    <item>
      <title>R语言系列—回归分析</title>
      <link>https://sword865.github.io/archives/12/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/12/</guid>
      <description>&lt;p&gt;**         **一元线形回归模型：有变量x,y。假设有关系y=c+bx+e,其中c+bx 是y随x变化的部分，e是随机误差。&lt;/p&gt;&#xA;&lt;p&gt;可以很容易的用函数lm()求出回归参数b,c并作相应的假设检验，如：&lt;/p&gt;&#xA;&lt;pre class=&#34;lang:r decode:true &#34;&gt;x&amp;lt;-c(0.10, 0.11, 0.12, 0.13, 0.14, 0.15,0.16, 0.17, 0.18, 0.20, 0.21, 0.23)&#xD;&#xA;y&amp;lt;-c(42.0, 43.5, 45.0, 45.5, 45.0, 47.5,49.0, 53.0, 50.0, 55.0, 55.0, 60.0)&#xD;&#xA;lm.sol&amp;lt;-lm(y ~ 1+x)&#xD;&#xA;summary(lm.sol)&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;仅列出部分返回结果：&lt;/p&gt;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;  Residuals:&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;    Min       1Q   Median    3Q     Max&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;  -2.0431  -0.7056  0.1694  0.6633  2.2653&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;  Coefficients:&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;              Estimate Std. Error      t value   Pr(&gt;|t|)&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;  (Intercept)   28.493      1.580   18.04    5.88e-09 ***&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;  x            130.835      9.683   13.51 9.50e-08 ***&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;  在我们的输入中，关键是lm.sol&lt;-lm(y ~ 1+x)的调用，这里可以看到，lm使用了参数y~1+x,即表示我们使用的是模型y=c+bx+e (1表示常数项)&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;p align=&#34;left&#34;&gt;&#xD;&#xA;  然后我们使用summary查看了lm返回的结果。在Residuals:中，我们可以看到的是一些关于残差的信息：最小最大值，4分位数等。Coefficients:中则是最为关键的对c和b的相关估计。其中Estimate是与b,c值的估计，Std. Error 则是回归参数b和c的标准差：sd(b), sd(c)。剩下的两个参数则是对回归参数的假设检验： t value是对b,c进行假设检验的t值，以及P-值(用来与显著性水平比较决定是否接受该阿假设检验)Pr(&gt;|t|)。最后我们还可以看到3个* 号，这表明x和y有非常显著的线性关系(*可以有0—3个，越多则线性关系越显著)。&#xD;&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
