<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ACM on 悟剑阁</title>
    <link>https://sword865.github.io/tags/acm/</link>
    <description>Recent content in ACM on 悟剑阁</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Wed, 19 Aug 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sword865.github.io/tags/acm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ACM暑假集训总结</title>
      <link>https://sword865.github.io/archives/23/</link>
      <pubDate>Wed, 19 Aug 2009 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/23/</guid>
      <description>&lt;p&gt;ACM的暑假集训结束了，趁着军训还没开始，对整个暑假接触到的东西作了一个总结，因为刚参加ACM不久，所以内容大都比较基础吧，文章中提到了些参考资料，如果需要的话，请留下邮箱。&lt;/p&gt;&#xA;&lt;p&gt;目录&lt;br&gt;&#xA;1)数据结构&lt;br&gt;&#xA; 1.并查集&lt;br&gt;&#xA; 2.高精度数&lt;br&gt;&#xA; 3.线段树&lt;br&gt;&#xA; 4.字典树&amp;lt;未完成&amp;gt;&lt;br&gt;&#xA;2)常用算法&lt;br&gt;&#xA; 1.递推&lt;br&gt;&#xA; 2.动态规划&lt;br&gt;&#xA; 3.贪心&lt;br&gt;&#xA; 4.搜索&lt;br&gt;&#xA;3)图论部分&#xA; 1.2-SAT问题&lt;br&gt;&#xA; 2.差分约束系统&lt;br&gt;&#xA; 3.二分图&lt;br&gt;&#xA; 4.最短路(SPFA,Dijkstra)&lt;br&gt;&#xA; 5.欧拉回路&amp;lt;未完成&amp;gt;&lt;br&gt;&#xA; 6.最优比率生成树&lt;br&gt;&#xA; 7.关键路径&lt;br&gt;&#xA; 8.网络流(流的算法/应用)&lt;br&gt;&#xA;     最大流算法(3种)&lt;br&gt;&#xA;     最小费用最大流算法&lt;br&gt;&#xA;     图的连通性（最小点割集）&amp;lt;未完成&amp;gt;&lt;br&gt;&#xA;     混合欧拉回路&lt;br&gt;&#xA; 9.其他图论相关问题算法:&lt;br&gt;&#xA;     K短路  &lt;br&gt;&#xA;     图的单向连通（包括2次DFS缩点） &lt;br&gt;&#xA;4)其他 &lt;br&gt;&#xA; 1.计算几何&lt;br&gt;&#xA; 2.数学(数论,组合数学,数值计算) &lt;br&gt;&#xA;5)附录&lt;br&gt;&#xA; 1.A*算法&lt;br&gt;&#xA; 2.位运算之格雷码：&lt;br&gt;&#xA; 3.线性同余方程&lt;/p&gt;&#xA;&lt;h2 id=&#34;一数据结构&#34;&gt;一．数据结构：&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1并查集&#34;&gt;1.并查集.&lt;/h3&gt;&#xA;&lt;p&gt;用于实现合并与查找两种操作的数据结构.&lt;br&gt;&#xA;实现方法:线形数组,有根树.&lt;br&gt;&#xA;优化:&lt;br&gt;&#xA;把深度小的树合并到深度大的树,深度相等时任选一棵树,既max(h1,h2), if h1&amp;lt;&amp;gt;h2. / h1+1, if h1=h2.&lt;br&gt;&#xA;合并操作时的路径压缩.&lt;br&gt;&#xA;并查集的偏移向量:&lt;br&gt;&#xA;并查集的偏移向量属于并查集的变形，只要适用于集合数目较少，或是固定的并查集类型。 &lt;br&gt;&#xA;增加一个offset字段,表示元素相对根的偏移量.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;在find函数中计算偏移量&#xD;&#xA;int findset ( int x )&#xD;&#xA;{&#xD;&#xA;    int t ;&#xD;&#xA;    if ( father [ x ] == x ) return x ;&#xD;&#xA;    else t = findset( father [ x ] ) ;&#xD;&#xA;    offset [ x ] = ( offset [ x ] + offset [ father [ x ] ] ) % DEPTH ;//DEPTH表示几个状态量&#xD;&#xA;    //如果1182中，DEPTH=3；&#xD;&#xA;    father [ x ] = t ;&#xD;&#xA;    return t ; &#xD;&#xA;}//使用函数递归调用查找父亲在处理上优于循环。&#xD;&#xA;union函数中计算偏移量&#xD;&#xA;void union(int x,int y,int d){&#xD;&#xA;    int fx , fy ;&#xD;&#xA;    fx = find ( x ) ;&#xD;&#xA;    fy = find ( y ) ;&#xD;&#xA;    if ( fx == fy ) return ;&#xD;&#xA;    father [ fx ] = fy ;&#xD;&#xA;    offset [ fx ] = (offset [ y ] - offset[x]+d+3)% 3 ;&#xD;&#xA;} &#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;2高精度数&#34;&gt;2.高精度数&lt;/h3&gt;&#xA;&lt;p&gt;大数的加减乘除&lt;br&gt;&#xA;小数的高精度计算参考pku1001&lt;/p&gt;</description>
    </item>
    <item>
      <title>有重复组合数</title>
      <link>https://sword865.github.io/archives/24/</link>
      <pubDate>Thu, 02 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/24/</guid>
      <description>&lt;p&gt;从n个元素中有重复地取r个，不计顺序，则不同的取法有多少种？&lt;br&gt;&#xA;这个问题的答案被称为有重复组合数。结果很简洁，是C(n+r-1,r)。(注：这表示从n+r-1个数中取出r个数的组合数)&lt;br&gt;&#xA;【证明1】&lt;br&gt;&#xA;我们先把原命题具体化。假设这n个元素就是1&lt;del&gt;n这n个数:       &lt;br&gt;&#xA;对于每一种选出来的组合a1，a2，a3，&amp;hellip; ，am，我们要求：a1&amp;lt;=a2&amp;lt;=a3&amp;lt;=&amp;hellip;&amp;lt;=ar，那么最终的目的就是找出这样的a(i)组数。&lt;br&gt;&#xA;这里我们构造b1=a1，b2= a2+1，&amp;hellip; ，b(i)= a(i)+(i-1)，&amp;hellip; ，b(r)= a(r)+(r-1)&lt;br&gt;&#xA;于是b(i)和a(i)一一对应，即所求a(i)组数对应于b(i)组数&lt;br&gt;&#xA;又因为 b1 &amp;lt; b2 &amp;lt; b3 &amp;lt; &amp;hellip; &amp;lt; br 且b(i)取值于1&lt;/del&gt; n+(r-1)&lt;br&gt;&#xA;亦即原命题等价于从1~ n+r-1中取得r个不重复排列数&lt;br&gt;&#xA;来源：&lt;a href=&#34;http://zhidao.baidu.com/question/16706714.html&#34;&gt;http://zhidao.baidu.com/question/16706714.html&lt;/a&gt;&lt;br&gt;&#xA;【证明2】&lt;br&gt;&#xA;将n个元素看做n个盒子,r看作r个无区别的球,则相当于:&lt;br&gt;&#xA;把r个同样的球放入n个顺次排列的盒子,求不计放球顺序的放法种数&lt;br&gt;&#xA;用0表示盒子,1表示球&lt;br&gt;&#xA;我们把这n个0和r个1写在一行上。&lt;br&gt;&#xA;由于球必须放在盒子中,规定某个0之前,到上一个0为止的1的个数,表示该盒子中装的球数&lt;br&gt;&#xA;注意到最后一个数必须是0&lt;br&gt;&#xA;所以相当于从前面n+r-1个位置中挑出r个位置放1，其余n-1个位置放0&lt;br&gt;&#xA;来源：&lt;a href=&#34;http://pengzhe0302.spaces.live.com/blog/cns!529d86ea9ec40ca2!113.entry&#34;&gt;http://pengzhe0302.spaces.live.com/blog/cns!529d86ea9ec40ca2!113.entry&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&gt;&#xD;&#xA;  &lt;embed id=&#34;lingoes_plugin_object&#34; width=&#34;0&#34; height=&#34;0&#34; type=&#34;application/lingoes-npruntime-capture-word-plugin&#34; hidden=&#34;true&#34; /&gt;&#xD;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>KMP算法复杂度分析</title>
      <link>https://sword865.github.io/archives/26/</link>
      <pubDate>Wed, 11 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/26/</guid>
      <description>&lt;p&gt;KMP算法也算接触很久了，今天却突然发现不知道那个的复杂度是怎么来的&lt;br&gt;&#xA;于是想啊想，查啊查，总结如下&lt;br&gt;&#xA;设代码为&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;s=0;  &#xD;&#xA;for(i=1;i&amp;lt;=m,i++){  &#xD;&#xA;    while(s&amp;gt;0&amp;amp;&amp;amp;a[i]!=b[s+1])s=next(s)  &#xD;&#xA;    if(a[i]==b[s+1])s++;  &#xD;&#xA;    if(s==n) return (i-n)&#xD;&#xA;}&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;分析的关键是那个while循环循环会让s减少&lt;br&gt;&#xA;而s又只会在第五行增加，于是j最多增加m次，&lt;br&gt;&#xA;在然后我们就知道j最多减少m次(因为不能为负)&lt;br&gt;&#xA;平摊到每个for上就是一次&lt;br&gt;&#xA;所以复杂度就是O(m)了&lt;br&gt;&#xA;不过也有书上说是O(m+n)&lt;br&gt;&#xA;这个就不是很明白了&amp;hellip;&#xA;想想在说&amp;hellip;&lt;/p&gt;&#xA;&lt;div&gt;&#xD;&#xA;  &lt;embed type=&#34;application/lingoes-npruntime-capture-word-plugin&#34; width=&#34;0&#34; height=&#34;0&#34; id=&#34;lingoes_plugin_object&#34; hidden=&#34;true&#34; /&gt;&#xD;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
