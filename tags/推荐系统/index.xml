<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>推荐系统 on 悟剑阁</title>
    <link>https://sword865.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 推荐系统 on 悟剑阁</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Mon, 17 Nov 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sword865.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于标签的推荐系统</title>
      <link>https://sword865.github.io/archives/5/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://sword865.github.io/archives/5/</guid>
      <description>&lt;p&gt;一、基于图模型的推荐&lt;/p&gt;&#xA;&lt;p&gt;在不考虑标签时，基于二项图有两种随机游走的图推荐算法：&lt;/p&gt;&#xA;&lt;p&gt;1.probability spreading&lt;/p&gt;&#xA;&lt;p&gt;随机游走算法，在游走中，每个目标得到权重是基于归属者的边计算出来的。&lt;/p&gt;&#xA;&lt;p&gt;每次传播(item-&amp;gt;user-&amp;gt;item)后用户Ui的兴趣向量：&lt;/p&gt;&#xA;&lt;div&gt;$$f_j^p=\sum_{l=1}^{n}\sum_{s=1}^{m}\frac{a_{lj}a_{ls}a_{is}}{K(U_l)K(I_s)},j=1…m$$&lt;/div&gt;&#xD;&#xA;&lt;p&gt;2.heat spreading&lt;/p&gt;&#xA;&lt;p&gt;规则与ProbS相反，在游走中，每个目标得到权重是基于自己的边计算出来的。&lt;/p&gt;&#xA;&lt;p&gt;每次传播后用户Ui的兴趣向量：&lt;/p&gt;&#xA;&lt;div&gt;$$f_h^p=\frac{1}{K(I_j)}\sum_{l=1}^{n}\sum_{s=1}^{m}\frac{a_{lj}a_{ls}a_{is}}{K(U_l)},j=1…m$$&lt;/div&gt;&#xD;&#xA;&lt;p&gt;其中：&lt;/p&gt;&#xA;&lt;div&gt;$$K(I_j)=\sum_{l=1}^{m}a_{lj}$$&lt;/div&gt;&#xD;&#xA;&lt;p&gt;是节目j的邻域大小，&lt;/p&gt;&#xA;&lt;div&gt;$$K(U_l)=\sum_{l=1}^{n}a_{ls}$$&lt;/div&gt;&#xD;&#xA;&lt;p&gt;是用户l的邻域大小。&lt;/p&gt;&#xA;&lt;p&gt;$a_{ij}$是表示用户i和物品j之间是否有边存在的二元向量。&lt;/p&gt;&#xA;&lt;p&gt;相比之下，Heats算法倾向于降低热门item的权重，而Probs中与增强对热门item的推荐。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;在随机游走算法的基础上，有基于&lt;span style=&#34;color: #333333; font-family: arial; font-size: 13px; line-height: 20.0200004577637px;&#34;&gt;三分图的标签推荐算法：&lt;/span&gt;&lt;/p&gt;&#xA;&lt;img title=&#34;NewImage.png&#34; src=&#34;https://sword865.github.io/images/archives/171255254884996.png&#34; alt=&#34;NewImage&#34; width=&#34;600&#34; height=&#34;305&#34; border=&#34;0&#34; /&gt;&#xD;&#xA;&lt;p&gt;图中，用户i的每个item的权重（1 or 0）会同时像用户和标签进行传播，这样每次传播后的兴趣向量：&lt;/p&gt;&#xA;&lt;p&gt;$f_j^t=\lambda f_j^p + (1-\lambda) f_j^{pt}$，其中$f_j^p$和$f_j^{pt}$分别是从(item-&amp;gt;user-&amp;gt;item)和(item-&amp;gt;tag-&amp;gt;item)传播后得到的权重。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;font-size: 14px;&#34;&gt;二、矩阵分解的张量模型&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;对三元阵$Y_{(n\times m\times t)}$进行矩阵分解，C为核张量，U,I,T为用户特征，物品特征和标签特征矩阵。&lt;/p&gt;&#xA;&lt;p&gt;根据分解结果对Y进行填充。&lt;/p&gt;&#xA;&lt;img title=&#34;NewImage.png&#34; src=&#34;https://sword865.github.io/images/archives/171508548949009.png&#34; alt=&#34;NewImage&#34; width=&#34;600&#34; height=&#34;260&#34; border=&#34;0&#34; /&gt;&#xD;&#xA;&lt;p&gt;填充后即得到评分矩阵&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;font-size: 14px;&#34;&gt; &lt;/span&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
